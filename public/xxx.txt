
// import SerialPort from 'serialport';
//
// class FrequencyGenerator {
//   private port: SerialPort;
//   private isPaused: boolean = false;
//   private currentFrequency: number | null = null;
//
//   constructor(portName: string, baudRate: number = 9600) {
//     this.port = new SerialPort(portName, {
//       baudRate: baudRate,
//       autoOpen: false,
//       lock: false,
//     });
//
//     this.port.on('error', (err: Error) => {
//       console.error('Error:', err.message);
//     });
//   }
//
//   private async send(command: string): Promise<void> {
//     return new Promise((resolve, reject) => {
//       this.port.write(command, (err: Error | null) => {
//         if (err) {
//           reject(`Error on write: ${err.message}`);
//         } else {
//           resolve();
//         }
//       });
//     });
//   }
//
//   private async receive(): Promise<string> {
//     return new Promise((resolve, reject) => {
//       this.port.on('data', (data: Buffer) => {
//         resolve(data.toString());
//       });
//
//       this.port.on('error', (err: Error) => {
//         reject(`Error on receive: ${err.message}`);
//       });
//     });
//   }
//
//   private delay(ms: number): Promise<void> {
//     return new Promise((resolve) => setTimeout(resolve, ms));
//   }
//
//   public async initial(): Promise<void> {
//     await this.send('UBZ1'); // Turn on Buzzer
//     await this.delay(500); // Allow some time for the command to take effect
//
//     // Ensure the device is set to master
//     await this.send('UMS0'); // Set to master
//     await this.delay(100);
//
//     // Ensure no cascading
//     await this.send('UUL0'); // Set to no cascading
//     await this.delay(100);
//
//     // Set Channel 2 to sine wave
//     await this.send('WFW00');
//     await this.delay(400);
//
//     // Set Channel 2 frequency to 3.1MHz
//     await this.send('WFF3100000.000000');
//     await this.delay(700);
//
//     // Set Channel 2 offset to 0
//     await this.send('WFO00.00');
//     await this.delay(350);
//
//     // Set Channel 2 duty cycle to 50%
//     await this.send('WFD50.0');
//     await this.delay(350);
//
//     // Set Channel 2 phase to 0
//     await this.send('WFP000');
//     await this.delay(350);
//
//     // Set Channel 2 attenuation to 0
//     await this.send('WFT0');
//     await this.delay(350);
//
//     // Set Channel 2 on
//     await this.send('WFN1');
//     await this.delay(350);
//   }
//
//   public async connect(): Promise<void> {
//     return new Promise((resolve, reject) => {
//       this.port.open((err: Error | null) => {
//         if (err) {
//           reject(`Error opening port: ${err.message}`);
//         } else {
//           resolve();
//         }
//       });
//     });
//   }
//
//   public async disconnect(): Promise<void> {
//     return new Promise((resolve, reject) => {
//       this.port.close((err: Error | null) => {
//         if (err) {
//           reject(`Error closing port: ${err.message}`);
//         } else {
//           resolve();
//         }
//       });
//     });
//   }
//
//   public async sendFrequency(frequency: number, duration: number): Promise<void> {
//     this.currentFrequency = frequency;
//     await this.send(`WMF${frequency.toFixed(6)}`);
//     await this.delay(duration);
//   }
//
//   public async sendFrequencies(frequencies: { frequency: number; duration: number }[]): Promise<void> {
//     for (const { frequency, duration } of frequencies) {
//       if (this.isPaused) {
//         await this.delay(100); // Pause for a while if paused
//         continue;
//       }
//       await this.sendFrequency(frequency, duration);
//     }
//     this.currentFrequency = null;
//   }
//
//   public pause(): void {
//     this.isPaused = true;
//   }
//
//   public resume(): void {
//     this.isPaused = false;
//   }
//
//   public async stop(): Promise<void> {
//     this.isPaused = true;
//     await this.send('USD2'); // Turn off sync between CH1 and CH2 voltage
//     await this.send('WFN0'); // Set Ch2 off
//     await this.send('WMN0'); // Set Ch1 off
//   }
//
//   public async setIntensity(value: number): Promise<void> {
//     const intensity = (value / 100).toFixed(2);
//     await this.send(`WMA${intensity}`);
//   }
//
//   public getCurrentFrequency(): number | null {
//     return this.currentFrequency;
//   }
//
//   public async readSettings() {
//     const settings = [
//       'RMW', 'RMF', 'RMA', 'RMO', 'RMD', 'RMP', 'RMT', 'RMN', 'RPM', 'RPN',
//       'RFW', 'RFF', 'RFA', 'RFO', 'RFD', 'RFP', 'RFT', 'RFN'
//     ];
//
//     for (const setting of settings) {
//       await this.send(setting);
//       await this.delay(30);
//       const response = await this.receive();
//       console.log(`Setting ${setting}: ${response}`);
//     }
//   }
// }
//
// export default FrequencyGenerator;
//
// // Example usage:
// (async () => {
//   const portName = 'COM3'; // Update this to the correct port
//   const generator = new FrequencyGenerator(portName);
//
//   await generator.connect();
//   await generator.initial(); // Initialize the device
//
//   const frequencies = [
//     { frequency: 100, duration: 1000 },
//     { frequency: 200, duration: 1000 },
//     { frequency: 300, duration: 1000 },
//     { frequency: 400, duration: 1000 },
//     { frequency: 500, duration: 1000 },
//   ]; // List of frequencies in Hz and their respective durations in milliseconds
//
//   await generator.sendFrequencies(frequencies);
//   await generator.stop();
//   await generator.disconnect();
// })();
